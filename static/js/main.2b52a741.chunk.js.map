{"version":3,"sources":["CompA.js","App.js","index.js"],"names":["CompA","useState","btnArr","setBtnArr","useEffect","className","map","item","index","style","marginRight","marginLeft","onClick","temp_state","beforeItem","currentItem","console","log","afterItem","handleClick","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"6JAGe,SAASA,IACtB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACRD,EAAU,CAAC,QAAS,SAAU,YAC7B,IAmCH,OACE,sBAAKE,UAAU,MAAf,UACE,mDADF,OAEGH,QAFH,IAEGA,OAFH,EAEGA,EAAQI,KAAI,SAACC,EAAMC,GAAP,OACX,gCACE,qCACA,wBAAQC,MAAO,CAAEC,YAAa,OAAQC,WAAY,QAAlD,SACGJ,IAEH,sBAAMK,QAAS,kBA1CH,SAACJ,GACnB,IAAIK,EAAU,YAAOX,GAIrB,GAAIA,EAAOM,EAAQ,GAAI,CACrB,IAAMM,EAAaZ,EAAOM,EAAQ,GAC5BO,EAAcb,EAAOM,GAI3BK,EAAWL,GAASM,EACpBD,EAAWL,EAAQ,GAAKO,EACxBC,QAAQC,IAAI,eAAgBH,EAAYC,EAAaF,OAChD,CACL,IAAME,EAAcb,EAAOM,GACrBU,EAAYhB,EAAOM,EAAQ,GAIjCK,EAAWL,GAASU,EACpBL,EAAWL,EAAQ,GAAKO,EACxBC,QAAQC,IAAI,eAAgBF,EAAaG,GAI3Cf,EAAUU,GAgBiBM,CAAYX,IAAjC,iBALQA,SC3CH,SAASY,IACtB,OACE,sBAAKf,UAAU,MAAf,UACE,mDACA,cAACL,EAAD,OCHN,IAAMqB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACL,EAAD,MAEFC,I","file":"static/js/main.2b52a741.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./styles.css\";\n\nexport default function CompA() {\n  const [btnArr, setBtnArr] = useState([]);\n\n  useEffect(() => {\n    setBtnArr([\"first\", \"second\", \"third\"]);\n  }, []);\n\n  const handleClick = (index) => {\n    let temp_state = [...btnArr];\n\n    // 2. Make a shallow copy of the element you want to mutate\n\n    if (btnArr[index - 1]) {\n      const beforeItem = btnArr[index - 1];\n      const currentItem = btnArr[index];\n      // 3. Update the property you're interested in\n\n      // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\n      temp_state[index] = beforeItem;\n      temp_state[index - 1] = currentItem;\n      console.log(\"temp_state 1\", beforeItem, currentItem, temp_state);\n    } else {\n      const currentItem = btnArr[index];\n      const afterItem = btnArr[index + 1];\n      // 3. Update the property you're interested in\n\n      // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\n      temp_state[index] = afterItem;\n      temp_state[index + 1] = currentItem;\n      console.log(\"temp_state 2\", currentItem, afterItem);\n    }\n\n    // 5. Set the state to our new copy\n    setBtnArr(temp_state);\n  };\n\n  // useEffect(() => {\n  //   setBtnArr(btnArr);\n  // }, [btnArr]);\n\n  return (\n    <div className=\"App\">\n      <h1>Hello CodeSandbox</h1>\n      {btnArr?.map((item, index) => (\n        <div key={index}>\n          <span>v</span>\n          <button style={{ marginRight: \"15px\", marginLeft: \"15px\" }}>\n            {item}\n          </button>\n          <span onClick={() => handleClick(index)}>A</span>\n        </div>\n      ))}\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport CompA from \"./CompA\";\nimport \"./styles.css\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Hello CodeSandbox</h1>\n      <CompA />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}